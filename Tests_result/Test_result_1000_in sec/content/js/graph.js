/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 690.0, "minX": 0.0, "maxY": 32648.0, "series": [{"data": [[0.0, 852.0], [0.1, 1882.0], [0.2, 2063.0], [0.3, 2063.0], [0.4, 2471.0], [0.5, 2689.0], [0.6, 3245.0], [0.7, 3256.0], [0.8, 3264.0], [0.9, 3334.0], [1.0, 3666.0], [1.1, 3688.0], [1.2, 3705.0], [1.3, 3731.0], [1.4, 3731.0], [1.5, 3772.0], [1.6, 3844.0], [1.7, 3870.0], [1.8, 3887.0], [1.9, 3942.0], [2.0, 3961.0], [2.1, 4022.0], [2.2, 4038.0], [2.3, 4057.0], [2.4, 4060.0], [2.5, 4088.0], [2.6, 4146.0], [2.7, 4149.0], [2.8, 4156.0], [2.9, 4172.0], [3.0, 4201.0], [3.1, 4202.0], [3.2, 4205.0], [3.3, 4206.0], [3.4, 4207.0], [3.5, 4207.0], [3.6, 4207.0], [3.7, 4208.0], [3.8, 4208.0], [3.9, 4208.0], [4.0, 4208.0], [4.1, 4209.0], [4.2, 4209.0], [4.3, 4209.0], [4.4, 4210.0], [4.5, 4212.0], [4.6, 4214.0], [4.7, 4215.0], [4.8, 4215.0], [4.9, 4216.0], [5.0, 4216.0], [5.1, 4217.0], [5.2, 4237.0], [5.3, 4237.0], [5.4, 4237.0], [5.5, 4238.0], [5.6, 4240.0], [5.7, 4241.0], [5.8, 4242.0], [5.9, 4242.0], [6.0, 4243.0], [6.1, 4243.0], [6.2, 4243.0], [6.3, 4244.0], [6.4, 4245.0], [6.5, 4248.0], [6.6, 4248.0], [6.7, 4316.0], [6.8, 4326.0], [6.9, 4326.0], [7.0, 4331.0], [7.1, 4375.0], [7.2, 4397.0], [7.3, 4398.0], [7.4, 4449.0], [7.5, 4502.0], [7.6, 4559.0], [7.7, 4622.0], [7.8, 4641.0], [7.9, 4659.0], [8.0, 4664.0], [8.1, 4729.0], [8.2, 4747.0], [8.3, 4769.0], [8.4, 4775.0], [8.5, 4830.0], [8.6, 4843.0], [8.7, 4912.0], [8.8, 4943.0], [8.9, 4954.0], [9.0, 4982.0], [9.1, 4992.0], [9.2, 5039.0], [9.3, 5084.0], [9.4, 5142.0], [9.5, 5148.0], [9.6, 5160.0], [9.7, 5192.0], [9.8, 5200.0], [9.9, 5201.0], [10.0, 5201.0], [10.1, 5202.0], [10.2, 5202.0], [10.3, 5203.0], [10.4, 5203.0], [10.5, 5203.0], [10.6, 5204.0], [10.7, 5204.0], [10.8, 5205.0], [10.9, 5205.0], [11.0, 5205.0], [11.1, 5206.0], [11.2, 5206.0], [11.3, 5206.0], [11.4, 5207.0], [11.5, 5207.0], [11.6, 5207.0], [11.7, 5207.0], [11.8, 5207.0], [11.9, 5207.0], [12.0, 5207.0], [12.1, 5208.0], [12.2, 5208.0], [12.3, 5208.0], [12.4, 5208.0], [12.5, 5208.0], [12.6, 5208.0], [12.7, 5208.0], [12.8, 5209.0], [12.9, 5209.0], [13.0, 5209.0], [13.1, 5210.0], [13.2, 5210.0], [13.3, 5210.0], [13.4, 5211.0], [13.5, 5211.0], [13.6, 5212.0], [13.7, 5212.0], [13.8, 5212.0], [13.9, 5212.0], [14.0, 5212.0], [14.1, 5212.0], [14.2, 5213.0], [14.3, 5213.0], [14.4, 5213.0], [14.5, 5213.0], [14.6, 5213.0], [14.7, 5213.0], [14.8, 5214.0], [14.9, 5214.0], [15.0, 5214.0], [15.1, 5214.0], [15.2, 5214.0], [15.3, 5214.0], [15.4, 5214.0], [15.5, 5215.0], [15.6, 5215.0], [15.7, 5215.0], [15.8, 5215.0], [15.9, 5215.0], [16.0, 5216.0], [16.1, 5216.0], [16.2, 5216.0], [16.3, 5216.0], [16.4, 5216.0], [16.5, 5217.0], [16.6, 5218.0], [16.7, 5218.0], [16.8, 5218.0], [16.9, 5221.0], [17.0, 5222.0], [17.1, 5225.0], [17.2, 5262.0], [17.3, 5303.0], [17.4, 5305.0], [17.5, 5305.0], [17.6, 5305.0], [17.7, 5306.0], [17.8, 5307.0], [17.9, 5308.0], [18.0, 5314.0], [18.1, 5315.0], [18.2, 5315.0], [18.3, 5316.0], [18.4, 5316.0], [18.5, 5317.0], [18.6, 5319.0], [18.7, 5320.0], [18.8, 5320.0], [18.9, 5323.0], [19.0, 5328.0], [19.1, 5349.0], [19.2, 5401.0], [19.3, 5426.0], [19.4, 5555.0], [19.5, 5561.0], [19.6, 5586.0], [19.7, 5759.0], [19.8, 5766.0], [19.9, 6004.0], [20.0, 6025.0], [20.1, 6106.0], [20.2, 6109.0], [20.3, 6151.0], [20.4, 6259.0], [20.5, 6504.0], [20.6, 6508.0], [20.7, 6615.0], [20.8, 6648.0], [20.9, 6650.0], [21.0, 6812.0], [21.1, 6996.0], [21.2, 7121.0], [21.3, 7200.0], [21.4, 7202.0], [21.5, 7202.0], [21.6, 7202.0], [21.7, 7202.0], [21.8, 7203.0], [21.9, 7203.0], [22.0, 7203.0], [22.1, 7203.0], [22.2, 7203.0], [22.3, 7203.0], [22.4, 7203.0], [22.5, 7204.0], [22.6, 7204.0], [22.7, 7204.0], [22.8, 7204.0], [22.9, 7204.0], [23.0, 7204.0], [23.1, 7204.0], [23.2, 7205.0], [23.3, 7205.0], [23.4, 7205.0], [23.5, 7205.0], [23.6, 7206.0], [23.7, 7206.0], [23.8, 7206.0], [23.9, 7206.0], [24.0, 7206.0], [24.1, 7207.0], [24.2, 7207.0], [24.3, 7207.0], [24.4, 7207.0], [24.5, 7207.0], [24.6, 7207.0], [24.7, 7207.0], [24.8, 7208.0], [24.9, 7208.0], [25.0, 7208.0], [25.1, 7208.0], [25.2, 7208.0], [25.3, 7208.0], [25.4, 7208.0], [25.5, 7208.0], [25.6, 7208.0], [25.7, 7208.0], [25.8, 7208.0], [25.9, 7208.0], [26.0, 7209.0], [26.1, 7209.0], [26.2, 7209.0], [26.3, 7209.0], [26.4, 7209.0], [26.5, 7210.0], [26.6, 7210.0], [26.7, 7210.0], [26.8, 7210.0], [26.9, 7210.0], [27.0, 7210.0], [27.1, 7210.0], [27.2, 7210.0], [27.3, 7210.0], [27.4, 7210.0], [27.5, 7210.0], [27.6, 7210.0], [27.7, 7210.0], [27.8, 7210.0], [27.9, 7211.0], [28.0, 7211.0], [28.1, 7211.0], [28.2, 7211.0], [28.3, 7211.0], [28.4, 7211.0], [28.5, 7211.0], [28.6, 7211.0], [28.7, 7211.0], [28.8, 7211.0], [28.9, 7211.0], [29.0, 7211.0], [29.1, 7212.0], [29.2, 7212.0], [29.3, 7212.0], [29.4, 7212.0], [29.5, 7212.0], [29.6, 7212.0], [29.7, 7212.0], [29.8, 7212.0], [29.9, 7212.0], [30.0, 7212.0], [30.1, 7212.0], [30.2, 7212.0], [30.3, 7212.0], [30.4, 7212.0], [30.5, 7212.0], [30.6, 7213.0], [30.7, 7213.0], [30.8, 7213.0], [30.9, 7213.0], [31.0, 7213.0], [31.1, 7213.0], [31.2, 7213.0], [31.3, 7213.0], [31.4, 7213.0], [31.5, 7213.0], [31.6, 7213.0], [31.7, 7213.0], [31.8, 7214.0], [31.9, 7214.0], [32.0, 7214.0], [32.1, 7214.0], [32.2, 7214.0], [32.3, 7214.0], [32.4, 7214.0], [32.5, 7214.0], [32.6, 7215.0], [32.7, 7215.0], [32.8, 7215.0], [32.9, 7215.0], [33.0, 7215.0], [33.1, 7215.0], [33.2, 7215.0], [33.3, 7215.0], [33.4, 7215.0], [33.5, 7215.0], [33.6, 7215.0], [33.7, 7215.0], [33.8, 7215.0], [33.9, 7215.0], [34.0, 7215.0], [34.1, 7215.0], [34.2, 7216.0], [34.3, 7216.0], [34.4, 7216.0], [34.5, 7216.0], [34.6, 7216.0], [34.7, 7216.0], [34.8, 7216.0], [34.9, 7216.0], [35.0, 7216.0], [35.1, 7216.0], [35.2, 7216.0], [35.3, 7217.0], [35.4, 7217.0], [35.5, 7217.0], [35.6, 7217.0], [35.7, 7217.0], [35.8, 7217.0], [35.9, 7218.0], [36.0, 7218.0], [36.1, 7218.0], [36.2, 7219.0], [36.3, 7219.0], [36.4, 7220.0], [36.5, 7220.0], [36.6, 7221.0], [36.7, 7222.0], [36.8, 7222.0], [36.9, 7226.0], [37.0, 7226.0], [37.1, 7230.0], [37.2, 7232.0], [37.3, 7240.0], [37.4, 7261.0], [37.5, 7263.0], [37.6, 7309.0], [37.7, 7314.0], [37.8, 7315.0], [37.9, 7316.0], [38.0, 7316.0], [38.1, 7316.0], [38.2, 7316.0], [38.3, 7316.0], [38.4, 7318.0], [38.5, 7318.0], [38.6, 7318.0], [38.7, 7321.0], [38.8, 7321.0], [38.9, 7322.0], [39.0, 7323.0], [39.1, 7324.0], [39.2, 7324.0], [39.3, 7327.0], [39.4, 7327.0], [39.5, 7328.0], [39.6, 7328.0], [39.7, 7330.0], [39.8, 7466.0], [39.9, 7539.0], [40.0, 7583.0], [40.1, 7638.0], [40.2, 7672.0], [40.3, 7675.0], [40.4, 7680.0], [40.5, 7692.0], [40.6, 7776.0], [40.7, 7854.0], [40.8, 7877.0], [40.9, 7939.0], [41.0, 7948.0], [41.1, 8029.0], [41.2, 8052.0], [41.3, 8086.0], [41.4, 8142.0], [41.5, 8185.0], [41.6, 8216.0], [41.7, 8292.0], [41.8, 8305.0], [41.9, 8308.0], [42.0, 8344.0], [42.1, 8345.0], [42.2, 8414.0], [42.3, 8441.0], [42.4, 8580.0], [42.5, 8580.0], [42.6, 8612.0], [42.7, 8644.0], [42.8, 8691.0], [42.9, 8754.0], [43.0, 8830.0], [43.1, 8893.0], [43.2, 8922.0], [43.3, 8936.0], [43.4, 8947.0], [43.5, 9008.0], [43.6, 9204.0], [43.7, 9208.0], [43.8, 9213.0], [43.9, 9247.0], [44.0, 9317.0], [44.1, 9332.0], [44.2, 9414.0], [44.3, 9437.0], [44.4, 9464.0], [44.5, 9615.0], [44.6, 9690.0], [44.7, 9873.0], [44.8, 9952.0], [44.9, 9979.0], [45.0, 10007.0], [45.1, 10090.0], [45.2, 10389.0], [45.3, 10416.0], [45.4, 10538.0], [45.5, 10575.0], [45.6, 10612.0], [45.7, 10618.0], [45.8, 10682.0], [45.9, 10735.0], [46.0, 10787.0], [46.1, 10896.0], [46.2, 10915.0], [46.3, 10945.0], [46.4, 10969.0], [46.5, 11067.0], [46.6, 11151.0], [46.7, 11158.0], [46.8, 11161.0], [46.9, 11167.0], [47.0, 11225.0], [47.1, 11244.0], [47.2, 11245.0], [47.3, 11248.0], [47.4, 11248.0], [47.5, 11249.0], [47.6, 11249.0], [47.7, 11250.0], [47.8, 11250.0], [47.9, 11251.0], [48.0, 11251.0], [48.1, 11252.0], [48.2, 11252.0], [48.3, 11253.0], [48.4, 11256.0], [48.5, 11257.0], [48.6, 11259.0], [48.7, 11262.0], [48.8, 11298.0], [48.9, 11313.0], [49.0, 11322.0], [49.1, 11342.0], [49.2, 11349.0], [49.3, 11359.0], [49.4, 11373.0], [49.5, 11377.0], [49.6, 11380.0], [49.7, 11396.0], [49.8, 11411.0], [49.9, 11485.0], [50.0, 11563.0], [50.1, 11597.0], [50.2, 11730.0], [50.3, 11804.0], [50.4, 11820.0], [50.5, 11833.0], [50.6, 11868.0], [50.7, 12033.0], [50.8, 12042.0], [50.9, 12078.0], [51.0, 12084.0], [51.1, 12169.0], [51.2, 12285.0], [51.3, 12316.0], [51.4, 12437.0], [51.5, 12457.0], [51.6, 12546.0], [51.7, 12574.0], [51.8, 12600.0], [51.9, 12617.0], [52.0, 12671.0], [52.1, 12674.0], [52.2, 12758.0], [52.3, 12779.0], [52.4, 12847.0], [52.5, 12890.0], [52.6, 12894.0], [52.7, 12896.0], [52.8, 12897.0], [52.9, 12898.0], [53.0, 12915.0], [53.1, 12928.0], [53.2, 12939.0], [53.3, 12994.0], [53.4, 13066.0], [53.5, 13120.0], [53.6, 13124.0], [53.7, 13166.0], [53.8, 13208.0], [53.9, 13260.0], [54.0, 13556.0], [54.1, 13593.0], [54.2, 13651.0], [54.3, 13656.0], [54.4, 13695.0], [54.5, 13806.0], [54.6, 13812.0], [54.7, 13869.0], [54.8, 13874.0], [54.9, 13877.0], [55.0, 13923.0], [55.1, 13928.0], [55.2, 13935.0], [55.3, 13971.0], [55.4, 14011.0], [55.5, 14014.0], [55.6, 14043.0], [55.7, 14120.0], [55.8, 14166.0], [55.9, 14185.0], [56.0, 14188.0], [56.1, 14256.0], [56.2, 14333.0], [56.3, 14349.0], [56.4, 14358.0], [56.5, 14427.0], [56.6, 14544.0], [56.7, 14568.0], [56.8, 14594.0], [56.9, 14703.0], [57.0, 14751.0], [57.1, 14759.0], [57.2, 14785.0], [57.3, 14906.0], [57.4, 14986.0], [57.5, 14992.0], [57.6, 15017.0], [57.7, 15260.0], [57.8, 15266.0], [57.9, 15365.0], [58.0, 15459.0], [58.1, 15790.0], [58.2, 15796.0], [58.3, 15832.0], [58.4, 15851.0], [58.5, 15861.0], [58.6, 15943.0], [58.7, 16024.0], [58.8, 16221.0], [58.9, 16303.0], [59.0, 16391.0], [59.1, 16401.0], [59.2, 16489.0], [59.3, 16517.0], [59.4, 16550.0], [59.5, 16584.0], [59.6, 16721.0], [59.7, 16756.0], [59.8, 16808.0], [59.9, 16821.0], [60.0, 16829.0], [60.1, 16851.0], [60.2, 16885.0], [60.3, 16891.0], [60.4, 16912.0], [60.5, 17087.0], [60.6, 17167.0], [60.7, 17190.0], [60.8, 17194.0], [60.9, 17195.0], [61.0, 17227.0], [61.1, 17299.0], [61.2, 17373.0], [61.3, 17382.0], [61.4, 17494.0], [61.5, 17494.0], [61.6, 17494.0], [61.7, 17510.0], [61.8, 17513.0], [61.9, 17554.0], [62.0, 17568.0], [62.1, 17654.0], [62.2, 17701.0], [62.3, 17712.0], [62.4, 17757.0], [62.5, 17818.0], [62.6, 17849.0], [62.7, 17889.0], [62.8, 17946.0], [62.9, 18063.0], [63.0, 18116.0], [63.1, 18148.0], [63.2, 18155.0], [63.3, 18209.0], [63.4, 18211.0], [63.5, 18238.0], [63.6, 18256.0], [63.7, 18283.0], [63.8, 18298.0], [63.9, 18318.0], [64.0, 18377.0], [64.1, 18387.0], [64.2, 18413.0], [64.3, 18421.0], [64.4, 18460.0], [64.5, 18514.0], [64.6, 18620.0], [64.7, 18653.0], [64.8, 18728.0], [64.9, 18754.0], [65.0, 18755.0], [65.1, 18819.0], [65.2, 18824.0], [65.3, 18905.0], [65.4, 18920.0], [65.5, 18958.0], [65.6, 18966.0], [65.7, 19010.0], [65.8, 19015.0], [65.9, 19023.0], [66.0, 19078.0], [66.1, 19086.0], [66.2, 19088.0], [66.3, 19138.0], [66.4, 19227.0], [66.5, 19318.0], [66.6, 19408.0], [66.7, 19509.0], [66.8, 19513.0], [66.9, 19533.0], [67.0, 19535.0], [67.1, 19602.0], [67.2, 19624.0], [67.3, 19629.0], [67.4, 19661.0], [67.5, 19712.0], [67.6, 19713.0], [67.7, 19756.0], [67.8, 19812.0], [67.9, 19890.0], [68.0, 19929.0], [68.1, 19986.0], [68.2, 20003.0], [68.3, 20087.0], [68.4, 20184.0], [68.5, 20268.0], [68.6, 20401.0], [68.7, 20547.0], [68.8, 20560.0], [68.9, 20576.0], [69.0, 20668.0], [69.1, 20676.0], [69.2, 20718.0], [69.3, 20852.0], [69.4, 20856.0], [69.5, 20880.0], [69.6, 20917.0], [69.7, 20919.0], [69.8, 20994.0], [69.9, 21046.0], [70.0, 21065.0], [70.1, 21098.0], [70.2, 21108.0], [70.3, 21126.0], [70.4, 21221.0], [70.5, 21257.0], [70.6, 21280.0], [70.7, 21284.0], [70.8, 21288.0], [70.9, 21383.0], [71.0, 21412.0], [71.1, 21427.0], [71.2, 21443.0], [71.3, 21445.0], [71.4, 21448.0], [71.5, 21484.0], [71.6, 21504.0], [71.7, 21527.0], [71.8, 21585.0], [71.9, 21606.0], [72.0, 21643.0], [72.1, 21678.0], [72.2, 21711.0], [72.3, 21722.0], [72.4, 21723.0], [72.5, 21854.0], [72.6, 21871.0], [72.7, 21874.0], [72.8, 21889.0], [72.9, 21892.0], [73.0, 21935.0], [73.1, 21969.0], [73.2, 21973.0], [73.3, 22078.0], [73.4, 22157.0], [73.5, 22224.0], [73.6, 22227.0], [73.7, 22241.0], [73.8, 22266.0], [73.9, 22289.0], [74.0, 22328.0], [74.1, 22406.0], [74.2, 22466.0], [74.3, 22501.0], [74.4, 22540.0], [74.5, 22556.0], [74.6, 22593.0], [74.7, 22604.0], [74.8, 22619.0], [74.9, 22645.0], [75.0, 22669.0], [75.1, 22704.0], [75.2, 22819.0], [75.3, 22849.0], [75.4, 22857.0], [75.5, 22878.0], [75.6, 22901.0], [75.7, 22958.0], [75.8, 23061.0], [75.9, 23092.0], [76.0, 23101.0], [76.1, 23144.0], [76.2, 23158.0], [76.3, 23173.0], [76.4, 23193.0], [76.5, 23205.0], [76.6, 23208.0], [76.7, 23231.0], [76.8, 23279.0], [76.9, 23330.0], [77.0, 23346.0], [77.1, 23354.0], [77.2, 23413.0], [77.3, 23444.0], [77.4, 23520.0], [77.5, 23530.0], [77.6, 23559.0], [77.7, 23579.0], [77.8, 23601.0], [77.9, 23785.0], [78.0, 23869.0], [78.1, 23871.0], [78.2, 23879.0], [78.3, 23986.0], [78.4, 24042.0], [78.5, 24087.0], [78.6, 24112.0], [78.7, 24159.0], [78.8, 24307.0], [78.9, 24311.0], [79.0, 24319.0], [79.1, 24411.0], [79.2, 24425.0], [79.3, 24491.0], [79.4, 24585.0], [79.5, 24599.0], [79.6, 24648.0], [79.7, 24755.0], [79.8, 24837.0], [79.9, 24882.0], [80.0, 24887.0], [80.1, 24888.0], [80.2, 24902.0], [80.3, 24917.0], [80.4, 24927.0], [80.5, 24973.0], [80.6, 25037.0], [80.7, 25063.0], [80.8, 25084.0], [80.9, 25174.0], [81.0, 25387.0], [81.1, 25438.0], [81.2, 25440.0], [81.3, 25441.0], [81.4, 25496.0], [81.5, 25515.0], [81.6, 25535.0], [81.7, 25702.0], [81.8, 25783.0], [81.9, 25821.0], [82.0, 26023.0], [82.1, 26099.0], [82.2, 26113.0], [82.3, 26114.0], [82.4, 26114.0], [82.5, 26119.0], [82.6, 26149.0], [82.7, 26260.0], [82.8, 26275.0], [82.9, 26285.0], [83.0, 26286.0], [83.1, 26335.0], [83.2, 26335.0], [83.3, 26340.0], [83.4, 26370.0], [83.5, 26400.0], [83.6, 26413.0], [83.7, 26422.0], [83.8, 26439.0], [83.9, 26458.0], [84.0, 26538.0], [84.1, 26568.0], [84.2, 26573.0], [84.3, 26607.0], [84.4, 26690.0], [84.5, 26743.0], [84.6, 26791.0], [84.7, 26824.0], [84.8, 26832.0], [84.9, 26862.0], [85.0, 26888.0], [85.1, 26891.0], [85.2, 26922.0], [85.3, 26971.0], [85.4, 26997.0], [85.5, 27046.0], [85.6, 27084.0], [85.7, 27107.0], [85.8, 27168.0], [85.9, 27182.0], [86.0, 27207.0], [86.1, 27248.0], [86.2, 27352.0], [86.3, 27375.0], [86.4, 27377.0], [86.5, 27454.0], [86.6, 27455.0], [86.7, 27559.0], [86.8, 27586.0], [86.9, 27641.0], [87.0, 27643.0], [87.1, 27769.0], [87.2, 27779.0], [87.3, 27810.0], [87.4, 27855.0], [87.5, 27967.0], [87.6, 28003.0], [87.7, 28113.0], [87.8, 28136.0], [87.9, 28160.0], [88.0, 28193.0], [88.1, 28195.0], [88.2, 28196.0], [88.3, 28221.0], [88.4, 28247.0], [88.5, 28270.0], [88.6, 28326.0], [88.7, 28578.0], [88.8, 28613.0], [88.9, 28648.0], [89.0, 28657.0], [89.1, 28679.0], [89.2, 28680.0], [89.3, 28686.0], [89.4, 28687.0], [89.5, 28740.0], [89.6, 28756.0], [89.7, 28819.0], [89.8, 28847.0], [89.9, 29022.0], [90.0, 29064.0], [90.1, 29204.0], [90.2, 29311.0], [90.3, 29411.0], [90.4, 29441.0], [90.5, 29446.0], [90.6, 29478.0], [90.7, 29550.0], [90.8, 29550.0], [90.9, 29567.0], [91.0, 29568.0], [91.1, 29596.0], [91.2, 29602.0], [91.3, 29680.0], [91.4, 29703.0], [91.5, 29712.0], [91.6, 29753.0], [91.7, 29852.0], [91.8, 29892.0], [91.9, 29895.0], [92.0, 29947.0], [92.1, 29954.0], [92.2, 29966.0], [92.3, 29967.0], [92.4, 30007.0], [92.5, 30021.0], [92.6, 30026.0], [92.7, 30115.0], [92.8, 30129.0], [92.9, 30162.0], [93.0, 30167.0], [93.1, 30263.0], [93.2, 30293.0], [93.3, 30307.0], [93.4, 30325.0], [93.5, 30361.0], [93.6, 30376.0], [93.7, 30378.0], [93.8, 30464.0], [93.9, 30471.0], [94.0, 30478.0], [94.1, 30571.0], [94.2, 30585.0], [94.3, 30589.0], [94.4, 30610.0], [94.5, 30713.0], [94.6, 30786.0], [94.7, 30826.0], [94.8, 30850.0], [94.9, 30853.0], [95.0, 30859.0], [95.1, 30863.0], [95.2, 30957.0], [95.3, 30970.0], [95.4, 30983.0], [95.5, 30998.0], [95.6, 31068.0], [95.7, 31081.0], [95.8, 31127.0], [95.9, 31141.0], [96.0, 31203.0], [96.1, 31288.0], [96.2, 31375.0], [96.3, 31384.0], [96.4, 31441.0], [96.5, 31532.0], [96.6, 31548.0], [96.7, 31556.0], [96.8, 31574.0], [96.9, 31597.0], [97.0, 31652.0], [97.1, 31655.0], [97.2, 31680.0], [97.3, 31683.0], [97.4, 31699.0], [97.5, 31716.0], [97.6, 31722.0], [97.7, 31743.0], [97.8, 31779.0], [97.9, 31779.0], [98.0, 31780.0], [98.1, 31782.0], [98.2, 31785.0], [98.3, 31807.0], [98.4, 31858.0], [98.5, 31865.0], [98.6, 31879.0], [98.7, 31884.0], [98.8, 31923.0], [98.9, 32003.0], [99.0, 32083.0], [99.1, 32124.0], [99.2, 32542.0], [99.3, 32560.0], [99.4, 32563.0], [99.5, 32569.0], [99.6, 32576.0], [99.7, 32584.0], [99.8, 32604.0], [99.9, 32648.0]], "isOverall": false, "label": "/request-groups", "isController": false}, {"data": [[0.0, 690.0], [0.1, 690.0], [0.2, 690.0], [0.3, 690.0], [0.4, 690.0], [0.5, 690.0], [0.6, 690.0], [0.7, 690.0], [0.8, 690.0], [0.9, 690.0], [1.0, 690.0], [1.1, 690.0], [1.2, 690.0], [1.3, 690.0], [1.4, 690.0], [1.5, 690.0], [1.6, 690.0], [1.7, 690.0], [1.8, 690.0], [1.9, 690.0], [2.0, 690.0], [2.1, 690.0], [2.2, 690.0], [2.3, 690.0], [2.4, 690.0], [2.5, 690.0], [2.6, 690.0], [2.7, 690.0], [2.8, 690.0], [2.9, 690.0], [3.0, 690.0], [3.1, 690.0], [3.2, 690.0], [3.3, 690.0], [3.4, 690.0], [3.5, 690.0], [3.6, 690.0], [3.7, 690.0], [3.8, 690.0], [3.9, 690.0], [4.0, 690.0], [4.1, 690.0], [4.2, 690.0], [4.3, 690.0], [4.4, 690.0], [4.5, 690.0], [4.6, 690.0], [4.7, 690.0], [4.8, 690.0], [4.9, 690.0], [5.0, 690.0], [5.1, 690.0], [5.2, 690.0], [5.3, 690.0], [5.4, 690.0], [5.5, 690.0], [5.6, 690.0], [5.7, 690.0], [5.8, 690.0], [5.9, 690.0], [6.0, 690.0], [6.1, 690.0], [6.2, 690.0], [6.3, 690.0], [6.4, 690.0], [6.5, 690.0], [6.6, 690.0], [6.7, 690.0], [6.8, 690.0], [6.9, 690.0], [7.0, 690.0], [7.1, 690.0], [7.2, 690.0], [7.3, 690.0], [7.4, 690.0], [7.5, 690.0], [7.6, 690.0], [7.7, 690.0], [7.8, 690.0], [7.9, 690.0], [8.0, 690.0], [8.1, 690.0], [8.2, 690.0], [8.3, 690.0], [8.4, 690.0], [8.5, 690.0], [8.6, 690.0], [8.7, 690.0], [8.8, 690.0], [8.9, 690.0], [9.0, 690.0], [9.1, 690.0], [9.2, 690.0], [9.3, 690.0], [9.4, 690.0], [9.5, 690.0], [9.6, 690.0], [9.7, 690.0], [9.8, 690.0], [9.9, 690.0], [10.0, 690.0], [10.1, 690.0], [10.2, 690.0], [10.3, 690.0], [10.4, 690.0], [10.5, 690.0], [10.6, 690.0], [10.7, 690.0], [10.8, 690.0], [10.9, 690.0], [11.0, 690.0], [11.1, 690.0], [11.2, 690.0], [11.3, 690.0], [11.4, 690.0], [11.5, 690.0], [11.6, 690.0], [11.7, 690.0], [11.8, 690.0], [11.9, 690.0], [12.0, 690.0], [12.1, 690.0], [12.2, 690.0], [12.3, 690.0], [12.4, 690.0], [12.5, 690.0], [12.6, 690.0], [12.7, 690.0], [12.8, 690.0], [12.9, 690.0], [13.0, 690.0], [13.1, 690.0], [13.2, 690.0], [13.3, 690.0], [13.4, 690.0], [13.5, 690.0], [13.6, 690.0], [13.7, 690.0], [13.8, 690.0], [13.9, 690.0], [14.0, 690.0], [14.1, 690.0], [14.2, 690.0], [14.3, 690.0], [14.4, 690.0], [14.5, 690.0], [14.6, 690.0], [14.7, 690.0], [14.8, 690.0], [14.9, 690.0], [15.0, 690.0], [15.1, 690.0], [15.2, 690.0], [15.3, 690.0], [15.4, 690.0], [15.5, 690.0], [15.6, 690.0], [15.7, 690.0], [15.8, 690.0], [15.9, 690.0], [16.0, 690.0], [16.1, 690.0], [16.2, 690.0], [16.3, 690.0], [16.4, 690.0], [16.5, 690.0], [16.6, 690.0], [16.7, 690.0], [16.8, 690.0], [16.9, 690.0], [17.0, 690.0], [17.1, 690.0], [17.2, 690.0], [17.3, 690.0], [17.4, 690.0], [17.5, 690.0], [17.6, 690.0], [17.7, 690.0], [17.8, 690.0], [17.9, 690.0], [18.0, 690.0], [18.1, 690.0], [18.2, 690.0], [18.3, 690.0], [18.4, 690.0], [18.5, 690.0], [18.6, 690.0], [18.7, 690.0], [18.8, 690.0], [18.9, 690.0], [19.0, 690.0], [19.1, 690.0], [19.2, 690.0], [19.3, 690.0], [19.4, 690.0], [19.5, 690.0], [19.6, 690.0], [19.7, 690.0], [19.8, 690.0], [19.9, 690.0], [20.0, 690.0], [20.1, 690.0], [20.2, 690.0], [20.3, 690.0], [20.4, 690.0], [20.5, 690.0], [20.6, 690.0], [20.7, 690.0], [20.8, 690.0], [20.9, 690.0], [21.0, 690.0], [21.1, 690.0], [21.2, 690.0], [21.3, 690.0], [21.4, 690.0], [21.5, 690.0], [21.6, 690.0], [21.7, 690.0], [21.8, 690.0], [21.9, 690.0], [22.0, 690.0], [22.1, 690.0], [22.2, 690.0], [22.3, 690.0], [22.4, 690.0], [22.5, 690.0], [22.6, 690.0], [22.7, 690.0], [22.8, 690.0], [22.9, 690.0], [23.0, 690.0], [23.1, 690.0], [23.2, 690.0], [23.3, 690.0], [23.4, 690.0], [23.5, 690.0], [23.6, 690.0], [23.7, 690.0], [23.8, 690.0], [23.9, 690.0], [24.0, 690.0], [24.1, 690.0], [24.2, 690.0], [24.3, 690.0], [24.4, 690.0], [24.5, 690.0], [24.6, 690.0], [24.7, 690.0], [24.8, 690.0], [24.9, 690.0], [25.0, 690.0], [25.1, 690.0], [25.2, 690.0], [25.3, 690.0], [25.4, 690.0], [25.5, 690.0], [25.6, 690.0], [25.7, 690.0], [25.8, 690.0], [25.9, 690.0], [26.0, 690.0], [26.1, 690.0], [26.2, 690.0], [26.3, 690.0], [26.4, 690.0], [26.5, 690.0], [26.6, 690.0], [26.7, 690.0], [26.8, 690.0], [26.9, 690.0], [27.0, 690.0], [27.1, 690.0], [27.2, 690.0], [27.3, 690.0], [27.4, 690.0], [27.5, 690.0], [27.6, 690.0], [27.7, 690.0], [27.8, 690.0], [27.9, 690.0], [28.0, 690.0], [28.1, 690.0], [28.2, 690.0], [28.3, 690.0], [28.4, 690.0], [28.5, 690.0], [28.6, 690.0], [28.7, 690.0], [28.8, 690.0], [28.9, 690.0], [29.0, 690.0], [29.1, 690.0], [29.2, 690.0], [29.3, 690.0], [29.4, 690.0], [29.5, 690.0], [29.6, 690.0], [29.7, 690.0], [29.8, 690.0], [29.9, 690.0], [30.0, 690.0], [30.1, 690.0], [30.2, 690.0], [30.3, 690.0], [30.4, 690.0], [30.5, 690.0], [30.6, 690.0], [30.7, 690.0], [30.8, 690.0], [30.9, 690.0], [31.0, 690.0], [31.1, 690.0], [31.2, 690.0], [31.3, 690.0], [31.4, 690.0], [31.5, 690.0], [31.6, 690.0], [31.7, 690.0], [31.8, 690.0], [31.9, 690.0], [32.0, 690.0], [32.1, 690.0], [32.2, 690.0], [32.3, 690.0], [32.4, 690.0], [32.5, 690.0], [32.6, 690.0], [32.7, 690.0], [32.8, 690.0], [32.9, 690.0], [33.0, 690.0], [33.1, 690.0], [33.2, 690.0], [33.3, 690.0], [33.4, 690.0], [33.5, 690.0], [33.6, 690.0], [33.7, 690.0], [33.8, 690.0], [33.9, 690.0], [34.0, 690.0], [34.1, 690.0], [34.2, 690.0], [34.3, 690.0], [34.4, 690.0], [34.5, 690.0], [34.6, 690.0], [34.7, 690.0], [34.8, 690.0], [34.9, 690.0], [35.0, 690.0], [35.1, 690.0], [35.2, 690.0], [35.3, 690.0], [35.4, 690.0], [35.5, 690.0], [35.6, 690.0], [35.7, 690.0], [35.8, 690.0], [35.9, 690.0], [36.0, 690.0], [36.1, 690.0], [36.2, 690.0], [36.3, 690.0], [36.4, 690.0], [36.5, 690.0], [36.6, 690.0], [36.7, 690.0], [36.8, 690.0], [36.9, 690.0], [37.0, 690.0], [37.1, 690.0], [37.2, 690.0], [37.3, 690.0], [37.4, 690.0], [37.5, 690.0], [37.6, 690.0], [37.7, 690.0], [37.8, 690.0], [37.9, 690.0], [38.0, 690.0], [38.1, 690.0], [38.2, 690.0], [38.3, 690.0], [38.4, 690.0], [38.5, 690.0], [38.6, 690.0], [38.7, 690.0], [38.8, 690.0], [38.9, 690.0], [39.0, 690.0], [39.1, 690.0], [39.2, 690.0], [39.3, 690.0], [39.4, 690.0], [39.5, 690.0], [39.6, 690.0], [39.7, 690.0], [39.8, 690.0], [39.9, 690.0], [40.0, 690.0], [40.1, 690.0], [40.2, 690.0], [40.3, 690.0], [40.4, 690.0], [40.5, 690.0], [40.6, 690.0], [40.7, 690.0], [40.8, 690.0], [40.9, 690.0], [41.0, 690.0], [41.1, 690.0], [41.2, 690.0], [41.3, 690.0], [41.4, 690.0], [41.5, 690.0], [41.6, 690.0], [41.7, 690.0], [41.8, 690.0], [41.9, 690.0], [42.0, 690.0], [42.1, 690.0], [42.2, 690.0], [42.3, 690.0], [42.4, 690.0], [42.5, 690.0], [42.6, 690.0], [42.7, 690.0], [42.8, 690.0], [42.9, 690.0], [43.0, 690.0], [43.1, 690.0], [43.2, 690.0], [43.3, 690.0], [43.4, 690.0], [43.5, 690.0], [43.6, 690.0], [43.7, 690.0], [43.8, 690.0], [43.9, 690.0], [44.0, 690.0], [44.1, 690.0], [44.2, 690.0], [44.3, 690.0], [44.4, 690.0], [44.5, 690.0], [44.6, 690.0], [44.7, 690.0], [44.8, 690.0], [44.9, 690.0], [45.0, 690.0], [45.1, 690.0], [45.2, 690.0], [45.3, 690.0], [45.4, 690.0], [45.5, 690.0], [45.6, 690.0], [45.7, 690.0], [45.8, 690.0], [45.9, 690.0], [46.0, 690.0], [46.1, 690.0], [46.2, 690.0], [46.3, 690.0], [46.4, 690.0], [46.5, 690.0], [46.6, 690.0], [46.7, 690.0], [46.8, 690.0], [46.9, 690.0], [47.0, 690.0], [47.1, 690.0], [47.2, 690.0], [47.3, 690.0], [47.4, 690.0], [47.5, 690.0], [47.6, 690.0], [47.7, 690.0], [47.8, 690.0], [47.9, 690.0], [48.0, 690.0], [48.1, 690.0], [48.2, 690.0], [48.3, 690.0], [48.4, 690.0], [48.5, 690.0], [48.6, 690.0], [48.7, 690.0], [48.8, 690.0], [48.9, 690.0], [49.0, 690.0], [49.1, 690.0], [49.2, 690.0], [49.3, 690.0], [49.4, 690.0], [49.5, 690.0], [49.6, 690.0], [49.7, 690.0], [49.8, 690.0], [49.9, 690.0], [50.0, 690.0], [50.1, 690.0], [50.2, 690.0], [50.3, 690.0], [50.4, 690.0], [50.5, 690.0], [50.6, 690.0], [50.7, 690.0], [50.8, 690.0], [50.9, 690.0], [51.0, 690.0], [51.1, 690.0], [51.2, 690.0], [51.3, 690.0], [51.4, 690.0], [51.5, 690.0], [51.6, 690.0], [51.7, 690.0], [51.8, 690.0], [51.9, 690.0], [52.0, 690.0], [52.1, 690.0], [52.2, 690.0], [52.3, 690.0], [52.4, 690.0], [52.5, 690.0], [52.6, 690.0], [52.7, 690.0], [52.8, 690.0], [52.9, 690.0], [53.0, 690.0], [53.1, 690.0], [53.2, 690.0], [53.3, 690.0], [53.4, 690.0], [53.5, 690.0], [53.6, 690.0], [53.7, 690.0], [53.8, 690.0], [53.9, 690.0], [54.0, 690.0], [54.1, 690.0], [54.2, 690.0], [54.3, 690.0], [54.4, 690.0], [54.5, 690.0], [54.6, 690.0], [54.7, 690.0], [54.8, 690.0], [54.9, 690.0], [55.0, 690.0], [55.1, 690.0], [55.2, 690.0], [55.3, 690.0], [55.4, 690.0], [55.5, 690.0], [55.6, 690.0], [55.7, 690.0], [55.8, 690.0], [55.9, 690.0], [56.0, 690.0], [56.1, 690.0], [56.2, 690.0], [56.3, 690.0], [56.4, 690.0], [56.5, 690.0], [56.6, 690.0], [56.7, 690.0], [56.8, 690.0], [56.9, 690.0], [57.0, 690.0], [57.1, 690.0], [57.2, 690.0], [57.3, 690.0], [57.4, 690.0], [57.5, 690.0], [57.6, 690.0], [57.7, 690.0], [57.8, 690.0], [57.9, 690.0], [58.0, 690.0], [58.1, 690.0], [58.2, 690.0], [58.3, 690.0], [58.4, 690.0], [58.5, 690.0], [58.6, 690.0], [58.7, 690.0], [58.8, 690.0], [58.9, 690.0], [59.0, 690.0], [59.1, 690.0], [59.2, 690.0], [59.3, 690.0], [59.4, 690.0], [59.5, 690.0], [59.6, 690.0], [59.7, 690.0], [59.8, 690.0], [59.9, 690.0], [60.0, 690.0], [60.1, 690.0], [60.2, 690.0], [60.3, 690.0], [60.4, 690.0], [60.5, 690.0], [60.6, 690.0], [60.7, 690.0], [60.8, 690.0], [60.9, 690.0], [61.0, 690.0], [61.1, 690.0], [61.2, 690.0], [61.3, 690.0], [61.4, 690.0], [61.5, 690.0], [61.6, 690.0], [61.7, 690.0], [61.8, 690.0], [61.9, 690.0], [62.0, 690.0], [62.1, 690.0], [62.2, 690.0], [62.3, 690.0], [62.4, 690.0], [62.5, 690.0], [62.6, 690.0], [62.7, 690.0], [62.8, 690.0], [62.9, 690.0], [63.0, 690.0], [63.1, 690.0], [63.2, 690.0], [63.3, 690.0], [63.4, 690.0], [63.5, 690.0], [63.6, 690.0], [63.7, 690.0], [63.8, 690.0], [63.9, 690.0], [64.0, 690.0], [64.1, 690.0], [64.2, 690.0], [64.3, 690.0], [64.4, 690.0], [64.5, 690.0], [64.6, 690.0], [64.7, 690.0], [64.8, 690.0], [64.9, 690.0], [65.0, 690.0], [65.1, 690.0], [65.2, 690.0], [65.3, 690.0], [65.4, 690.0], [65.5, 690.0], [65.6, 690.0], [65.7, 690.0], [65.8, 690.0], [65.9, 690.0], [66.0, 690.0], [66.1, 690.0], [66.2, 690.0], [66.3, 690.0], [66.4, 690.0], [66.5, 690.0], [66.6, 690.0], [66.7, 690.0], [66.8, 690.0], [66.9, 690.0], [67.0, 690.0], [67.1, 690.0], [67.2, 690.0], [67.3, 690.0], [67.4, 690.0], [67.5, 690.0], [67.6, 690.0], [67.7, 690.0], [67.8, 690.0], [67.9, 690.0], [68.0, 690.0], [68.1, 690.0], [68.2, 690.0], [68.3, 690.0], [68.4, 690.0], [68.5, 690.0], [68.6, 690.0], [68.7, 690.0], [68.8, 690.0], [68.9, 690.0], [69.0, 690.0], [69.1, 690.0], [69.2, 690.0], [69.3, 690.0], [69.4, 690.0], [69.5, 690.0], [69.6, 690.0], [69.7, 690.0], [69.8, 690.0], [69.9, 690.0], [70.0, 690.0], [70.1, 690.0], [70.2, 690.0], [70.3, 690.0], [70.4, 690.0], [70.5, 690.0], [70.6, 690.0], [70.7, 690.0], [70.8, 690.0], [70.9, 690.0], [71.0, 690.0], [71.1, 690.0], [71.2, 690.0], [71.3, 690.0], [71.4, 690.0], [71.5, 690.0], [71.6, 690.0], [71.7, 690.0], [71.8, 690.0], [71.9, 690.0], [72.0, 690.0], [72.1, 690.0], [72.2, 690.0], [72.3, 690.0], [72.4, 690.0], [72.5, 690.0], [72.6, 690.0], [72.7, 690.0], [72.8, 690.0], [72.9, 690.0], [73.0, 690.0], [73.1, 690.0], [73.2, 690.0], [73.3, 690.0], [73.4, 690.0], [73.5, 690.0], [73.6, 690.0], [73.7, 690.0], [73.8, 690.0], [73.9, 690.0], [74.0, 690.0], [74.1, 690.0], [74.2, 690.0], [74.3, 690.0], [74.4, 690.0], [74.5, 690.0], [74.6, 690.0], [74.7, 690.0], [74.8, 690.0], [74.9, 690.0], [75.0, 690.0], [75.1, 690.0], [75.2, 690.0], [75.3, 690.0], [75.4, 690.0], [75.5, 690.0], [75.6, 690.0], [75.7, 690.0], [75.8, 690.0], [75.9, 690.0], [76.0, 690.0], [76.1, 690.0], [76.2, 690.0], [76.3, 690.0], [76.4, 690.0], [76.5, 690.0], [76.6, 690.0], [76.7, 690.0], [76.8, 690.0], [76.9, 690.0], [77.0, 690.0], [77.1, 690.0], [77.2, 690.0], [77.3, 690.0], [77.4, 690.0], [77.5, 690.0], [77.6, 690.0], [77.7, 690.0], [77.8, 690.0], [77.9, 690.0], [78.0, 690.0], [78.1, 690.0], [78.2, 690.0], [78.3, 690.0], [78.4, 690.0], [78.5, 690.0], [78.6, 690.0], [78.7, 690.0], [78.8, 690.0], [78.9, 690.0], [79.0, 690.0], [79.1, 690.0], [79.2, 690.0], [79.3, 690.0], [79.4, 690.0], [79.5, 690.0], [79.6, 690.0], [79.7, 690.0], [79.8, 690.0], [79.9, 690.0], [80.0, 690.0], [80.1, 690.0], [80.2, 690.0], [80.3, 690.0], [80.4, 690.0], [80.5, 690.0], [80.6, 690.0], [80.7, 690.0], [80.8, 690.0], [80.9, 690.0], [81.0, 690.0], [81.1, 690.0], [81.2, 690.0], [81.3, 690.0], [81.4, 690.0], [81.5, 690.0], [81.6, 690.0], [81.7, 690.0], [81.8, 690.0], [81.9, 690.0], [82.0, 690.0], [82.1, 690.0], [82.2, 690.0], [82.3, 690.0], [82.4, 690.0], [82.5, 690.0], [82.6, 690.0], [82.7, 690.0], [82.8, 690.0], [82.9, 690.0], [83.0, 690.0], [83.1, 690.0], [83.2, 690.0], [83.3, 690.0], [83.4, 690.0], [83.5, 690.0], [83.6, 690.0], [83.7, 690.0], [83.8, 690.0], [83.9, 690.0], [84.0, 690.0], [84.1, 690.0], [84.2, 690.0], [84.3, 690.0], [84.4, 690.0], [84.5, 690.0], [84.6, 690.0], [84.7, 690.0], [84.8, 690.0], [84.9, 690.0], [85.0, 690.0], [85.1, 690.0], [85.2, 690.0], [85.3, 690.0], [85.4, 690.0], [85.5, 690.0], [85.6, 690.0], [85.7, 690.0], [85.8, 690.0], [85.9, 690.0], [86.0, 690.0], [86.1, 690.0], [86.2, 690.0], [86.3, 690.0], [86.4, 690.0], [86.5, 690.0], [86.6, 690.0], [86.7, 690.0], [86.8, 690.0], [86.9, 690.0], [87.0, 690.0], [87.1, 690.0], [87.2, 690.0], [87.3, 690.0], [87.4, 690.0], [87.5, 690.0], [87.6, 690.0], [87.7, 690.0], [87.8, 690.0], [87.9, 690.0], [88.0, 690.0], [88.1, 690.0], [88.2, 690.0], [88.3, 690.0], [88.4, 690.0], [88.5, 690.0], [88.6, 690.0], [88.7, 690.0], [88.8, 690.0], [88.9, 690.0], [89.0, 690.0], [89.1, 690.0], [89.2, 690.0], [89.3, 690.0], [89.4, 690.0], [89.5, 690.0], [89.6, 690.0], [89.7, 690.0], [89.8, 690.0], [89.9, 690.0], [90.0, 690.0], [90.1, 690.0], [90.2, 690.0], [90.3, 690.0], [90.4, 690.0], [90.5, 690.0], [90.6, 690.0], [90.7, 690.0], [90.8, 690.0], [90.9, 690.0], [91.0, 690.0], [91.1, 690.0], [91.2, 690.0], [91.3, 690.0], [91.4, 690.0], [91.5, 690.0], [91.6, 690.0], [91.7, 690.0], [91.8, 690.0], [91.9, 690.0], [92.0, 690.0], [92.1, 690.0], [92.2, 690.0], [92.3, 690.0], [92.4, 690.0], [92.5, 690.0], [92.6, 690.0], [92.7, 690.0], [92.8, 690.0], [92.9, 690.0], [93.0, 690.0], [93.1, 690.0], [93.2, 690.0], [93.3, 690.0], [93.4, 690.0], [93.5, 690.0], [93.6, 690.0], [93.7, 690.0], [93.8, 690.0], [93.9, 690.0], [94.0, 690.0], [94.1, 690.0], [94.2, 690.0], [94.3, 690.0], [94.4, 690.0], [94.5, 690.0], [94.6, 690.0], [94.7, 690.0], [94.8, 690.0], [94.9, 690.0], [95.0, 690.0], [95.1, 690.0], [95.2, 690.0], [95.3, 690.0], [95.4, 690.0], [95.5, 690.0], [95.6, 690.0], [95.7, 690.0], [95.8, 690.0], [95.9, 690.0], [96.0, 690.0], [96.1, 690.0], [96.2, 690.0], [96.3, 690.0], [96.4, 690.0], [96.5, 690.0], [96.6, 690.0], [96.7, 690.0], [96.8, 690.0], [96.9, 690.0], [97.0, 690.0], [97.1, 690.0], [97.2, 690.0], [97.3, 690.0], [97.4, 690.0], [97.5, 690.0], [97.6, 690.0], [97.7, 690.0], [97.8, 690.0], [97.9, 690.0], [98.0, 690.0], [98.1, 690.0], [98.2, 690.0], [98.3, 690.0], [98.4, 690.0], [98.5, 690.0], [98.6, 690.0], [98.7, 690.0], [98.8, 690.0], [98.9, 690.0], [99.0, 690.0], [99.1, 690.0], [99.2, 690.0], [99.3, 690.0], [99.4, 690.0], [99.5, 690.0], [99.6, 690.0], [99.7, 690.0], [99.8, 690.0], [99.9, 690.0]], "isOverall": false, "label": "/obtain", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 163.0, "series": [{"data": [[800.0, 1.0], [1800.0, 1.0], [2000.0, 1.0], [2400.0, 2.0], [2600.0, 1.0], [3200.0, 3.0], [3300.0, 1.0], [3600.0, 2.0], [3700.0, 3.0], [3800.0, 3.0], [3900.0, 2.0], [4000.0, 5.0], [4100.0, 4.0], [4200.0, 38.0], [4300.0, 7.0], [4500.0, 2.0], [4600.0, 4.0], [4400.0, 1.0], [4700.0, 4.0], [4800.0, 2.0], [4900.0, 5.0], [5000.0, 2.0], [5100.0, 4.0], [5200.0, 75.0], [5300.0, 18.0], [5400.0, 2.0], [5500.0, 3.0], [5700.0, 2.0], [6100.0, 3.0], [6000.0, 2.0], [6200.0, 1.0], [6500.0, 2.0], [6600.0, 3.0], [6900.0, 1.0], [6800.0, 1.0], [7100.0, 1.0], [7200.0, 163.0], [7400.0, 1.0], [7300.0, 22.0], [7500.0, 2.0], [7600.0, 5.0], [7700.0, 1.0], [7800.0, 2.0], [7900.0, 2.0], [8000.0, 3.0], [8100.0, 2.0], [8200.0, 2.0], [8300.0, 4.0], [8500.0, 2.0], [8600.0, 3.0], [8400.0, 2.0], [8700.0, 1.0], [8900.0, 3.0], [8800.0, 2.0], [9000.0, 1.0], [9200.0, 4.0], [9300.0, 2.0], [9400.0, 3.0], [9600.0, 2.0], [9800.0, 1.0], [9900.0, 2.0], [10000.0, 2.0], [10300.0, 1.0], [10500.0, 2.0], [10600.0, 3.0], [10700.0, 2.0], [10400.0, 1.0], [10900.0, 3.0], [11000.0, 1.0], [11100.0, 4.0], [10800.0, 1.0], [11200.0, 19.0], [11300.0, 9.0], [11400.0, 2.0], [11700.0, 1.0], [11500.0, 2.0], [11800.0, 4.0], [12000.0, 4.0], [12100.0, 1.0], [12200.0, 1.0], [12400.0, 2.0], [12300.0, 1.0], [12500.0, 2.0], [12600.0, 4.0], [12700.0, 2.0], [12800.0, 6.0], [12900.0, 4.0], [13200.0, 2.0], [13100.0, 3.0], [13000.0, 1.0], [13500.0, 2.0], [13600.0, 3.0], [13800.0, 5.0], [13900.0, 4.0], [14000.0, 3.0], [14100.0, 4.0], [14200.0, 1.0], [14300.0, 3.0], [14400.0, 1.0], [14500.0, 3.0], [14700.0, 4.0], [15000.0, 1.0], [14900.0, 3.0], [15200.0, 2.0], [15300.0, 1.0], [15700.0, 2.0], [15800.0, 3.0], [15400.0, 1.0], [16200.0, 1.0], [16000.0, 1.0], [16300.0, 2.0], [15900.0, 1.0], [17200.0, 2.0], [16400.0, 2.0], [16800.0, 6.0], [17000.0, 1.0], [17400.0, 3.0], [18200.0, 6.0], [17600.0, 1.0], [17800.0, 3.0], [18000.0, 1.0], [18400.0, 3.0], [18800.0, 2.0], [19000.0, 6.0], [18600.0, 2.0], [19400.0, 1.0], [19200.0, 1.0], [19600.0, 4.0], [19800.0, 2.0], [20000.0, 2.0], [20200.0, 1.0], [20400.0, 1.0], [20600.0, 2.0], [21000.0, 3.0], [20800.0, 3.0], [21200.0, 5.0], [21400.0, 6.0], [21600.0, 3.0], [21800.0, 5.0], [22200.0, 5.0], [22000.0, 1.0], [22400.0, 2.0], [22600.0, 4.0], [22800.0, 4.0], [23200.0, 4.0], [23400.0, 2.0], [23000.0, 2.0], [23800.0, 3.0], [24000.0, 2.0], [23600.0, 1.0], [24400.0, 3.0], [24800.0, 4.0], [25400.0, 4.0], [24600.0, 1.0], [25000.0, 3.0], [25800.0, 1.0], [26000.0, 2.0], [26200.0, 4.0], [26400.0, 5.0], [26600.0, 2.0], [26800.0, 5.0], [27000.0, 2.0], [27200.0, 2.0], [27400.0, 2.0], [27600.0, 2.0], [28200.0, 3.0], [27800.0, 2.0], [28000.0, 1.0], [28600.0, 7.0], [28800.0, 2.0], [29200.0, 1.0], [29400.0, 4.0], [29000.0, 2.0], [29600.0, 2.0], [30200.0, 2.0], [29800.0, 3.0], [30000.0, 3.0], [30400.0, 3.0], [30600.0, 1.0], [31200.0, 2.0], [30800.0, 5.0], [31000.0, 2.0], [31400.0, 1.0], [31600.0, 5.0], [31800.0, 5.0], [32000.0, 2.0], [32600.0, 2.0], [16500.0, 3.0], [16700.0, 2.0], [17100.0, 4.0], [16900.0, 1.0], [17300.0, 2.0], [17500.0, 4.0], [17700.0, 3.0], [17900.0, 1.0], [18100.0, 3.0], [18300.0, 3.0], [18500.0, 1.0], [18700.0, 3.0], [18900.0, 4.0], [19100.0, 1.0], [19300.0, 1.0], [19700.0, 3.0], [19500.0, 4.0], [19900.0, 2.0], [20100.0, 1.0], [20700.0, 1.0], [20500.0, 3.0], [20900.0, 3.0], [21100.0, 2.0], [21500.0, 3.0], [21300.0, 2.0], [21900.0, 3.0], [21700.0, 3.0], [22500.0, 4.0], [22300.0, 1.0], [22100.0, 1.0], [22700.0, 1.0], [23300.0, 3.0], [22900.0, 2.0], [23100.0, 5.0], [23500.0, 4.0], [23700.0, 1.0], [23900.0, 1.0], [24500.0, 2.0], [24100.0, 2.0], [24300.0, 3.0], [24900.0, 4.0], [24700.0, 1.0], [25500.0, 2.0], [25100.0, 1.0], [25300.0, 1.0], [25700.0, 2.0], [26100.0, 5.0], [26300.0, 4.0], [26500.0, 3.0], [26700.0, 2.0], [26900.0, 3.0], [27100.0, 3.0], [27300.0, 3.0], [27500.0, 2.0], [27700.0, 2.0], [27900.0, 1.0], [28100.0, 6.0], [28300.0, 1.0], [28500.0, 1.0], [28700.0, 2.0], [29300.0, 1.0], [29500.0, 5.0], [29700.0, 3.0], [29900.0, 4.0], [30100.0, 4.0], [30300.0, 5.0], [30500.0, 3.0], [30700.0, 2.0], [30900.0, 4.0], [31300.0, 2.0], [31100.0, 2.0], [31500.0, 5.0], [31700.0, 8.0], [31900.0, 1.0], [32100.0, 1.0], [32500.0, 6.0]], "isOverall": false, "label": "/request-groups", "isController": false}, {"data": [[600.0, 1.0]], "isOverall": false, "label": "/obtain", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 32600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1000.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.7424135E12, "maxY": 500.71599999999967, "series": [{"data": [[1.7424135E12, 1.0]], "isOverall": false, "label": "Получение токена", "isController": false}, {"data": [[1.7424135E12, 500.71599999999967]], "isOverall": false, "label": "Получение ресторанных групп ", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7424135E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 690.0, "minX": 1.0, "maxY": 32604.0, "series": [{"data": [[2.0, 32595.0], [3.0, 32584.0], [4.0, 32576.0], [5.0, 32560.0], [6.0, 32569.0], [7.0, 32604.0], [8.0, 32563.0], [9.0, 31858.0], [10.0, 31782.0], [11.0, 31780.0], [12.0, 31779.0], [13.0, 31743.0], [14.0, 31722.0], [15.0, 31716.0], [16.0, 31699.0], [17.0, 31683.0], [18.0, 31652.0], [19.0, 32003.0], [20.0, 31807.0], [21.0, 32124.0], [22.0, 32083.0], [23.0, 31779.0], [24.0, 31879.0], [25.0, 31923.0], [26.0, 31884.0], [27.0, 31288.0], [28.0, 31865.0], [29.0, 31785.0], [30.0, 31141.0], [31.0, 31574.0], [33.0, 31312.0], [34.0, 31680.0], [37.0, 31548.0], [36.0, 31626.0], [39.0, 30970.0], [38.0, 30983.0], [41.0, 30957.0], [40.0, 31532.0], [43.0, 30853.0], [42.0, 31441.0], [45.0, 30850.0], [44.0, 30863.0], [47.0, 31127.0], [46.0, 30826.0], [49.0, 30786.0], [48.0, 31081.0], [51.0, 31375.0], [50.0, 31384.0], [53.0, 30610.0], [52.0, 30859.0], [55.0, 31203.0], [54.0, 30585.0], [57.0, 30571.0], [56.0, 30471.0], [59.0, 30713.0], [58.0, 30998.0], [61.0, 30464.0], [60.0, 30478.0], [63.0, 30307.0], [62.0, 30589.0], [67.0, 30021.0], [66.0, 30026.0], [65.0, 30167.0], [64.0, 30361.0], [71.0, 30162.0], [70.0, 30115.0], [69.0, 30376.0], [68.0, 29967.0], [75.0, 29954.0], [74.0, 30263.0], [73.0, 29895.0], [72.0, 29852.0], [78.0, 30166.0], [76.0, 29753.0], [83.0, 29966.0], [82.0, 29596.0], [81.0, 30293.0], [80.0, 30135.0], [87.0, 29947.0], [86.0, 30129.0], [85.0, 29712.0], [84.0, 29602.0], [91.0, 29550.0], [90.0, 29411.0], [89.0, 29703.0], [88.0, 29441.0], [95.0, 29315.5], [93.0, 29446.0], [92.0, 29568.0], [99.0, 29478.0], [98.0, 29022.0], [97.0, 29680.0], [96.0, 29550.0], [103.0, 28657.0], [102.0, 28687.0], [101.0, 29311.0], [100.0, 28819.0], [107.0, 28847.0], [106.0, 28270.0], [105.0, 28740.0], [104.0, 29204.0], [111.0, 28686.0], [110.0, 28136.0], [109.0, 28196.0], [108.0, 28193.0], [115.0, 28648.0], [114.0, 28613.0], [113.0, 28680.0], [112.0, 28756.0], [119.0, 27855.0], [118.0, 28003.0], [117.0, 28578.0], [116.0, 28679.0], [123.0, 28195.0], [122.0, 28221.0], [121.0, 28326.0], [120.0, 27810.0], [126.0, 28160.0], [125.0, 28113.0], [124.0, 28247.0], [135.0, 26922.0], [134.0, 27643.0], [133.0, 27375.0], [132.0, 27769.0], [131.0, 27377.0], [130.0, 27967.0], [129.0, 27641.0], [128.0, 27669.0], [143.0, 27352.0], [142.0, 26690.0], [141.0, 27046.0], [140.0, 26824.0], [139.0, 27454.0], [138.0, 26862.0], [137.0, 27455.0], [136.0, 27586.0], [151.0, 27084.0], [150.0, 27168.0], [149.0, 27107.0], [148.0, 27182.0], [147.0, 26370.0], [146.0, 26891.0], [145.0, 27207.0], [144.0, 27248.0], [159.0, 26340.0], [158.0, 26832.0], [157.0, 26113.0], [156.0, 26888.0], [155.0, 26997.0], [154.0, 26754.5], [152.0, 26458.0], [167.0, 26400.0], [166.0, 26439.0], [165.0, 26568.0], [164.0, 26573.0], [163.0, 26607.0], [162.0, 26119.0], [161.0, 26791.0], [160.0, 26743.0], [175.0, 26275.0], [174.0, 26285.5], [172.0, 26335.0], [171.0, 26335.0], [170.0, 26413.0], [169.0, 26260.0], [168.0, 26422.0], [183.0, 25174.0], [182.0, 26023.0], [181.0, 26099.0], [180.0, 26149.0], [179.0, 26114.0], [178.0, 25496.0], [177.0, 26114.0], [176.0, 25387.0], [191.0, 24927.0], [190.0, 24882.0], [189.0, 25702.0], [188.0, 25063.0], [187.0, 25084.0], [186.0, 25783.0], [185.0, 25037.0], [184.0, 25821.0], [199.0, 25441.0], [198.0, 24887.0], [197.0, 24648.0], [196.0, 25535.0], [195.0, 24973.0], [194.0, 25515.0], [193.0, 24888.0], [192.0, 24902.0], [207.0, 24319.0], [206.0, 24837.0], [205.0, 24425.0], [204.0, 24491.0], [203.0, 24585.0], [202.0, 24755.0], [201.0, 25438.0], [200.0, 25440.0], [215.0, 24599.0], [214.0, 24087.0], [213.0, 24112.0], [212.0, 24159.0], [211.0, 24917.0], [210.0, 24359.0], [208.0, 24311.0], [223.0, 23601.0], [222.0, 23444.0], [221.0, 23530.0], [220.0, 23785.0], [219.0, 23870.0], [217.0, 23879.0], [216.0, 23986.0], [231.0, 23279.0], [230.0, 23193.0], [229.0, 24042.0], [228.0, 23330.0], [227.0, 23559.0], [226.0, 23579.0], [225.0, 23346.0], [224.0, 23354.0], [239.0, 23278.5], [237.0, 23520.0], [236.0, 23158.0], [235.0, 23061.0], [234.0, 23101.0], [233.0, 23092.0], [232.0, 23173.0], [247.0, 22604.0], [246.0, 23231.0], [245.0, 22901.0], [244.0, 22958.0], [243.0, 23208.0], [242.0, 22849.0], [241.0, 22669.0], [240.0, 22878.0], [255.0, 22593.0], [254.0, 22466.0], [253.0, 22819.0], [252.0, 22512.5], [250.0, 23205.0], [249.0, 22501.0], [248.0, 22704.0], [269.0, 21871.0], [271.0, 21722.5], [268.0, 22289.0], [259.0, 22328.0], [258.0, 22266.0], [257.0, 22157.0], [256.0, 22857.0], [267.0, 21935.0], [266.0, 21711.0], [265.0, 22540.0], [264.0, 22241.0], [263.0, 22556.0], [262.0, 22078.0], [261.0, 22645.0], [260.0, 22224.0], [286.0, 21412.0], [287.0, 21484.0], [285.0, 21284.0], [284.0, 21046.0], [283.0, 21854.0], [282.0, 21427.0], [281.0, 21892.0], [280.0, 21606.0], [279.0, 21889.0], [273.0, 21969.0], [272.0, 21874.0], [275.0, 21973.0], [274.0, 21504.0], [278.0, 21643.0], [277.0, 22227.0], [276.0, 21678.0], [302.0, 21108.0], [303.0, 21098.0], [301.0, 21183.5], [290.0, 21257.0], [289.0, 21443.0], [288.0, 20880.0], [299.0, 21383.0], [298.0, 21341.0], [297.0, 20676.0], [296.0, 21126.0], [295.0, 21445.0], [294.0, 21221.0], [293.0, 21288.0], [292.0, 21556.0], [318.0, 20268.0], [319.0, 19509.0], [317.0, 20087.0], [316.0, 20184.0], [315.0, 20560.0], [314.0, 20547.0], [313.0, 20668.0], [312.0, 20401.0], [311.0, 20576.0], [305.0, 20718.0], [304.0, 20856.0], [307.0, 20994.0], [306.0, 21280.0], [310.0, 20917.0], [309.0, 21065.0], [308.0, 20852.0], [334.0, 19661.0], [335.0, 19629.0], [333.0, 19812.0], [332.0, 19711.5], [330.0, 19023.0], [329.0, 19713.0], [328.0, 19624.0], [327.0, 20003.0], [321.0, 19986.0], [320.0, 19756.0], [323.0, 19712.0], [322.0, 19929.0], [326.0, 19535.0], [325.0, 19318.0], [324.0, 19513.0], [350.0, 18920.0], [351.0, 18653.0], [349.0, 18256.0], [348.0, 18387.0], [347.0, 19138.0], [346.0, 18755.0], [345.0, 18824.0], [344.0, 19078.0], [343.0, 18905.0], [337.0, 19602.0], [336.0, 19227.0], [339.0, 18966.0], [338.0, 19015.0], [342.0, 19086.0], [341.0, 19408.0], [340.0, 19088.0], [366.0, 17849.0], [367.0, 18460.0], [365.0, 18413.0], [364.0, 18318.0], [363.0, 18819.0], [362.0, 18116.0], [361.0, 18377.0], [360.0, 18148.0], [359.0, 18754.0], [352.0, 18620.0], [355.0, 18421.0], [354.0, 18362.5], [358.0, 18728.0], [357.0, 18958.0], [356.0, 19010.0], [382.0, 17701.0], [383.0, 17494.0], [381.0, 17554.0], [380.0, 17373.0], [379.0, 17823.0], [377.0, 17946.0], [376.0, 17818.0], [375.0, 18063.0], [369.0, 18155.0], [368.0, 18298.0], [371.0, 17494.0], [370.0, 18283.0], [374.0, 17712.0], [373.0, 18238.0], [372.0, 18209.0], [398.0, 17190.0], [399.0, 16829.0], [397.0, 16303.0], [396.0, 16912.0], [395.0, 17195.0], [394.0, 17227.0], [393.0, 16517.0], [392.0, 17510.0], [391.0, 17406.0], [385.0, 17382.0], [384.0, 17654.0], [387.0, 17194.0], [386.0, 17167.0], [389.0, 17494.0], [388.0, 17568.0], [414.0, 16221.0], [415.0, 16401.0], [413.0, 16024.0], [412.0, 16391.0], [411.0, 16550.0], [410.0, 15943.0], [409.0, 16489.0], [408.0, 16702.5], [406.0, 16868.0], [403.0, 16806.0], [401.0, 16756.0], [400.0, 17087.0], [404.0, 16808.0], [430.0, 15017.0], [431.0, 14120.0], [429.0, 14568.0], [428.0, 14906.0], [427.0, 15260.0], [426.0, 14759.0], [425.0, 15790.0], [424.0, 14989.0], [422.0, 15851.0], [417.0, 15266.0], [416.0, 15365.0], [419.0, 15796.0], [418.0, 15861.0], [421.0, 15459.0], [420.0, 15832.0], [446.0, 13695.0], [447.0, 14188.0], [445.0, 14256.0], [444.0, 14349.0], [443.0, 14392.5], [441.0, 14185.0], [440.0, 14333.0], [439.0, 13875.5], [433.0, 14594.0], [432.0, 14014.0], [435.0, 14703.0], [434.0, 14785.0], [437.0, 14544.0], [436.0, 14751.0], [462.0, 13656.0], [463.0, 13593.0], [461.0, 13812.0], [460.0, 13066.0], [459.0, 13935.0], [458.0, 13651.0], [457.0, 13923.0], [456.0, 13928.0], [455.0, 14043.0], [449.0, 13869.0], [448.0, 14166.0], [451.0, 13124.0], [450.0, 13556.0], [454.0, 14011.0], [453.0, 13806.0], [452.0, 13971.0], [478.0, 12758.0], [479.0, 12915.0], [477.0, 12939.0], [476.0, 12847.0], [475.0, 12893.5], [473.0, 12928.0], [472.0, 12285.0], [471.0, 12994.0], [465.0, 12898.0], [464.0, 12779.0], [467.0, 13166.0], [466.0, 12546.0], [470.0, 13208.0], [469.0, 13120.0], [468.0, 13260.0], [494.0, 11349.0], [495.0, 12042.0], [493.0, 11359.0], [492.0, 12033.0], [491.0, 12457.0], [490.0, 12437.0], [489.0, 12316.0], [488.0, 12574.0], [487.0, 12084.0], [480.0, 12169.0], [482.0, 12894.0], [481.0, 12617.0], [486.0, 12674.0], [485.0, 12600.0], [484.0, 12783.5], [509.0, 11250.8], [504.0, 11252.0], [496.0, 11313.0], [540.0, 10090.0], [543.0, 10969.0], [529.0, 11411.0], [528.0, 11298.0], [531.0, 11167.0], [530.0, 11380.0], [533.0, 11262.0], [532.0, 10915.0], [542.0, 10416.0], [541.0, 11067.0], [539.0, 11158.0], [538.0, 11151.0], [537.0, 10896.0], [536.0, 11225.0], [527.0, 11377.0], [513.0, 11396.0], [512.0, 11248.0], [515.0, 11485.0], [514.0, 12078.0], [517.0, 11373.0], [516.0, 11868.0], [519.0, 11833.0], [518.0, 11804.0], [526.0, 11322.0], [525.0, 10787.0], [524.0, 11730.0], [523.0, 11563.0], [522.0, 11820.0], [521.0, 11342.0], [520.0, 11597.0], [535.0, 11161.0], [534.0, 10945.0], [569.0, 8936.0], [573.0, 8922.0], [574.0, 8644.0], [561.0, 9213.0], [560.0, 9204.0], [563.0, 9414.0], [562.0, 8612.0], [565.0, 9247.0], [564.0, 9332.0], [572.0, 8754.0], [571.0, 8830.0], [570.0, 8893.0], [568.0, 9008.0], [551.0, 9952.0], [550.0, 10389.0], [549.0, 10538.0], [548.0, 10618.0], [547.0, 10612.0], [546.0, 10575.0], [545.0, 10682.0], [544.0, 10735.0], [559.0, 9437.0], [558.0, 9317.0], [557.0, 9464.0], [556.0, 9690.0], [555.0, 9873.0], [554.0, 9615.0], [553.0, 9979.0], [552.0, 10007.0], [567.0, 9208.0], [566.0, 8947.0], [583.0, 8142.0], [604.0, 8086.0], [605.0, 7204.0], [603.0, 7204.0], [602.0, 7215.0], [601.0, 7212.75], [582.0, 8345.0], [581.0, 8216.0], [580.0, 8580.0], [579.0, 8691.0], [578.0, 8441.0], [577.0, 8344.0], [576.0, 8497.0], [591.0, 7939.0], [590.0, 8052.0], [589.0, 7321.0], [588.0, 7316.0], [587.0, 8292.0], [586.0, 8305.0], [585.0, 8308.0], [584.0, 8185.0], [597.0, 7211.0], [596.0, 7216.0], [595.0, 7215.0], [592.0, 7216.0], [615.0, 7948.0], [638.0, 7672.0], [639.0, 7212.0], [637.0, 7215.0], [636.0, 7216.25], [632.0, 7211.0], [614.0, 7327.0], [613.0, 8029.0], [612.0, 7202.0], [611.0, 7205.0], [610.0, 7680.0], [609.0, 7208.0], [608.0, 7207.0], [628.0, 7207.5], [626.0, 7215.0], [624.0, 7321.666666666667], [621.0, 7218.5], [619.0, 7216.0], [618.0, 7328.0], [617.0, 7877.0], [616.0, 7322.0], [664.0, 7213.0], [668.0, 7208.0], [671.0, 7204.0], [657.0, 7213.0], [661.0, 7207.666666666667], [658.0, 7316.0], [670.0, 7318.0], [669.0, 7692.0], [667.0, 7213.0], [666.0, 7211.0], [665.0, 7314.0], [655.0, 7259.0], [640.0, 7210.0], [642.0, 7203.0], [641.0, 7324.0], [644.0, 7206.0], [643.0, 7324.0], [646.0, 7200.0], [645.0, 7205.0], [654.0, 7208.0], [652.0, 7314.666666666666], [663.0, 7214.0], [662.0, 7318.0], [692.0, 7205.0], [701.0, 7203.5], [698.0, 7212.0], [679.0, 7213.0], [678.0, 7230.2], [673.0, 7203.0], [672.0, 7206.0], [687.0, 7209.5], [686.0, 7206.0], [684.0, 7220.0], [683.0, 7211.0], [681.0, 7267.5], [695.0, 7323.0], [694.0, 7212.0], [693.0, 7315.0], [691.0, 7208.0], [689.0, 7316.0], [688.0, 7210.0], [734.0, 7214.333333333333], [735.0, 7208.0], [731.0, 7208.5], [729.0, 7211.5], [727.0, 7212.5], [725.0, 7204.0], [724.0, 7210.75], [720.0, 7367.0], [717.0, 7248.0], [705.0, 7213.0], [708.0, 7215.0], [707.0, 7209.666666666667], [710.0, 7213.0], [709.0, 7220.666666666667], [714.0, 7638.0], [713.0, 7213.0], [712.0, 7209.5], [765.0, 7208.0], [764.0, 7210.6], [741.0, 7332.4], [738.0, 7216.0], [759.0, 7212.5], [757.0, 7213.333333333333], [756.0, 7212.0], [753.0, 7210.0], [752.0, 7207.0], [751.0, 7214.0], [750.0, 7215.0], [749.0, 7212.0], [748.0, 7210.5], [746.0, 7213.0], [745.0, 7214.333333333333], [744.0, 7215.0], [796.0, 6025.0], [773.0, 852.0], [771.0, 7215.0], [770.0, 7212.4], [783.0, 7330.0], [782.0, 7583.0], [781.0, 7539.0], [780.0, 6812.0], [779.0, 7214.333333333333], [776.0, 7209.6], [799.0, 5561.0], [785.0, 7466.0], [784.0, 7263.0], [787.0, 6615.0], [786.0, 6648.0], [789.0, 6508.0], [788.0, 7240.0], [791.0, 7261.0], [790.0, 7232.0], [798.0, 6504.0], [797.0, 6650.0], [795.0, 6109.0], [794.0, 7121.0], [793.0, 6996.0], [792.0, 7226.0], [824.0, 6004.0], [828.0, 5212.0], [831.0, 5210.0], [821.0, 5207.428571428572], [830.0, 5305.0], [829.0, 5208.0], [827.0, 5323.0], [826.0, 5305.0], [825.0, 6106.0], [814.0, 5205.0], [801.0, 5401.0], [800.0, 6259.0], [803.0, 5314.0], [802.0, 5320.0], [805.0, 6151.0], [804.0, 5307.0], [807.0, 5212.0], [806.0, 5216.0], [813.0, 5236.0], [812.0, 5213.0], [809.0, 5215.0], [808.0, 5206.0], [823.0, 5204.0], [822.0, 5203.0], [837.0, 5317.0], [862.0, 5405.5], [860.0, 5216.375000000001], [839.0, 5759.0], [838.0, 5215.0], [836.0, 5209.0], [835.0, 5328.0], [834.0, 5316.0], [833.0, 5201.0], [832.0, 5308.0], [852.0, 5215.0], [851.0, 5215.0], [850.0, 5216.0], [849.0, 5306.0], [848.0, 5305.0], [847.0, 5303.0], [846.0, 5315.0], [845.0, 5320.0], [844.0, 5766.0], [843.0, 5033.0], [841.0, 5316.0], [840.0, 4943.0], [893.0, 5205.0], [894.0, 5208.0], [882.0, 5205.0], [880.0, 5214.5], [892.0, 5207.0], [891.0, 5204.0], [890.0, 5213.0], [888.0, 5206.0], [876.0, 5209.0], [864.0, 5216.0], [866.0, 5208.0], [865.0, 5211.0], [871.0, 5209.25], [867.0, 5207.0], [873.0, 5208.0], [872.0, 5210.0], [887.0, 5205.0], [886.0, 5214.0], [885.0, 5211.0], [883.0, 5214.0], [902.0, 5349.0], [915.0, 5148.0], [926.0, 4201.0], [925.0, 4207.6], [920.0, 4625.5], [901.0, 5426.0], [900.0, 5555.0], [899.0, 5207.0], [898.0, 5214.0], [897.0, 5202.0], [896.0, 5206.5], [911.0, 4215.0], [910.0, 4214.0], [909.0, 4216.0], [908.0, 5160.0], [907.0, 4992.0], [906.0, 5192.0], [905.0, 4449.0], [904.0, 5181.5], [918.0, 4209.0], [917.0, 4216.0], [916.0, 5084.0], [914.0, 5200.0], [913.0, 4208.0], [952.0, 4331.0], [948.0, 4208.0], [951.0, 4559.0], [950.0, 4659.0], [949.0, 4641.0], [946.0, 3844.0], [945.0, 4375.0], [944.0, 4729.0], [943.0, 4622.0], [928.0, 4206.0], [930.0, 4202.0], [929.0, 4210.0], [932.0, 4912.0], [931.0, 4982.0], [935.0, 4060.0], [934.0, 4892.0], [942.0, 4664.0], [941.0, 4229.0], [940.0, 4769.0], [939.0, 4775.0], [938.0, 4215.0], [937.0, 4326.0], [936.0, 4843.0], [988.0, 3705.0], [991.0, 2689.0], [977.0, 4172.0], [976.0, 4156.0], [979.0, 4038.0], [978.0, 4146.0], [981.0, 3942.0], [980.0, 4057.0], [990.0, 3666.0], [989.0, 3731.0], [987.0, 3688.0], [986.0, 3772.0], [985.0, 3887.0], [984.0, 3870.0], [975.0, 4149.0], [967.0, 4241.866666666666], [974.0, 4088.0], [973.0, 4217.0], [972.0, 4316.0], [971.0, 4397.0], [970.0, 4326.0], [969.0, 4450.0], [983.0, 3961.0], [982.0, 4022.0], [999.0, 1882.0], [998.0, 2063.0], [997.0, 2463.0], [996.0, 2471.0], [995.0, 3256.0], [994.0, 3245.0], [993.0, 3299.0]], "isOverall": false, "label": "/request-groups", "isController": false}, {"data": [[500.71599999999967, 14713.66699999999]], "isOverall": false, "label": "/request-groups-Aggregated", "isController": false}, {"data": [[1.0, 690.0]], "isOverall": false, "label": "/obtain", "isController": false}, {"data": [[1.0, 690.0]], "isOverall": false, "label": "/obtain-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 999.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6775.5, "minX": 1.7424135E12, "maxY": 22110.25, "series": [{"data": [[1.7424135E12, 22110.25]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7424135E12, 6775.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7424135E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 690.0, "minX": 1.7424135E12, "maxY": 14713.66699999999, "series": [{"data": [[1.7424135E12, 14713.66699999999]], "isOverall": false, "label": "/request-groups", "isController": false}, {"data": [[1.7424135E12, 690.0]], "isOverall": false, "label": "/obtain", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7424135E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 683.0, "minX": 1.7424135E12, "maxY": 12801.126000000004, "series": [{"data": [[1.7424135E12, 12801.126000000004]], "isOverall": false, "label": "/request-groups", "isController": false}, {"data": [[1.7424135E12, 683.0]], "isOverall": false, "label": "/obtain", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7424135E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 545.0, "minX": 1.7424135E12, "maxY": 4143.007999999996, "series": [{"data": [[1.7424135E12, 4143.007999999996]], "isOverall": false, "label": "/request-groups", "isController": false}, {"data": [[1.7424135E12, 545.0]], "isOverall": false, "label": "/obtain", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7424135E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 690.0, "minX": 1.7424135E12, "maxY": 690.0, "series": [{"data": [[1.7424135E12, 690.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7424135E12, 690.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7424135E12, 690.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7424135E12, 690.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7424135E12, 690.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7424135E12, 690.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7424135E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 690.0, "minX": 1.0, "maxY": 32572.5, "series": [{"data": [[1.0, 690.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 5214.5], [8.0, 32572.5], [9.0, 10389.0], [38.0, 11366.0], [10.0, 14989.0], [170.0, 7212.0], [11.0, 3666.0], [3.0, 2463.0], [50.0, 4242.0], [53.0, 7321.0], [1.0, 1367.0], [16.0, 18109.0], [17.0, 16221.0], [18.0, 27985.0], [19.0, 19004.5], [20.0, 19784.0], [24.0, 22853.0], [25.0, 21369.0], [106.0, 5208.0], [27.0, 21889.0], [28.0, 21117.0], [29.0, 28353.5], [30.0, 24841.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 170.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 32572.5, "series": [{"data": [[1.0, 683.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 0.0], [8.0, 32572.5], [9.0, 10389.0], [38.0, 5686.0], [10.0, 14989.0], [170.0, 0.0], [11.0, 3666.0], [3.0, 2463.0], [50.0, 3951.5], [53.0, 7320.0], [1.0, 1367.0], [16.0, 18109.0], [17.0, 16221.0], [18.0, 27985.0], [19.0, 19004.5], [20.0, 19784.0], [24.0, 22853.0], [25.0, 21369.0], [106.0, 0.0], [27.0, 21889.0], [28.0, 21116.5], [29.0, 28353.5], [30.0, 24840.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 170.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.683333333333334, "minX": 1.7424135E12, "maxY": 16.683333333333334, "series": [{"data": [[1.7424135E12, 16.683333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7424135E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7424135E12, "maxY": 11.216666666666667, "series": [{"data": [[1.7424135E12, 0.016666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7424135E12, 3.1333333333333333]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}, {"data": [[1.7424135E12, 0.6]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.7424135E12, 11.216666666666667]], "isOverall": false, "label": "404", "isController": false}, {"data": [[1.7424135E12, 0.13333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.7424135E12, 1.5833333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7424135E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7424135E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7424135E12, 16.666666666666668]], "isOverall": false, "label": "/request-groups-failure", "isController": false}, {"data": [[1.7424135E12, 0.016666666666666666]], "isOverall": false, "label": "/obtain-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7424135E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7424135E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7424135E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7424135E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7424135E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

